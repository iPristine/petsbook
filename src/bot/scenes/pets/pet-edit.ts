import { Action, Ctx, Scene, SceneEnter, On } from 'nestjs-telegraf';
import { BotScenes } from '../types';
import { I18nTranslateService } from '../../../i18n/i18n.service';
import { PetsService } from '../../../pets/pets.service';
import { PetButtons } from './pet.buttons';
import { BaseScene } from '@bot/interfaces/base.scene';
import { BotContext } from '@bot/interfaces/context.interface';

@Scene(BotScenes.PET_EDIT)
export class PetEdit extends BaseScene {
  constructor(
    private i18n: I18nTranslateService,
    private petsService: PetsService,
  ) {
    super();
  }

  @SceneEnter()
  async enterPetEdit(@Ctx() ctx: BotContext) {
    const petId = ctx.session['currentPetId'];
    const pet = await this.petsService.getPetById(petId);

    if (!pet) {
      await ctx.reply('–û—à–∏–±–∫–∞: –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω');
      await ctx['scene'].enter(BotScenes.MY_PETS);
      return;
    }

    const message = [
      '‚úèÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?',
      '',
      `–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:`,
      `üêæ –ò–º—è: ${pet.name}`,
      `üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${pet.age || '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
    ].join('\n');

    await ctx.reply(message, PetButtons.petEdit());
  }

  @Action('edit_name')
  async editName(@Ctx() ctx: BotContext) {
    ctx.session['editField'] = 'name';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞:');
  }

  @Action('edit_age')
  async editAge(@Ctx() ctx: BotContext) {
    ctx.session['editField'] = 'age';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–∏—Ç–æ–º—Ü–∞:');
  }

  @On('text')
  async onText(@Ctx() ctx: BotContext) {
    const field = ctx.session['editField'];
    const petId = ctx.session['currentPetId'];
    const text = ctx.message['text'];

    if (!field || !petId) {
      this.navigate(ctx, BotScenes.PET_DETAILS);
      return;
    }

    try {
      if (field === 'name') {
        if (text.length < 2 || text.length > 20) {
          await ctx.reply('–ò–º—è –ø–∏—Ç–æ–º—Ü–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤');
          return;
        }
        await this.petsService.updatePet(petId, { name: text });
        await ctx.reply('‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ');
      } else if (field === 'age') {
        const age = parseInt(text);
        if (isNaN(age) || age < 0 || age > 30) {
          await ctx.reply(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 0 –¥–æ 30 –ª–µ—Ç)',
          );
          return;
        }
        await this.petsService.updatePet(petId, { age });
        await ctx.reply('‚úÖ –í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω');
      }
    } catch (error) {
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    }

    this.navigate(ctx, BotScenes.PET_DETAILS);
  }

  @Action('back')
  async back(@Ctx() ctx: BotContext) {
    this.navigate(ctx, BotScenes.PET_DETAILS);
  }
}
