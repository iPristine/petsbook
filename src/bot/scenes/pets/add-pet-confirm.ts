import { Action, Ctx, Scene, SceneEnter } from 'nestjs-telegraf';
import { Context } from 'telegraf';
import { BotScenes } from '../types';
import { I18nTranslateService } from '../../../i18n/i18n.service';
import { PetsService } from '../../../pets/pets.service';
import { UserService } from '../../../user/user.service';
import { PetButtons } from './pet.buttons';

@Scene(BotScenes.ADD_PET_CONFIRM)
export class AddPetConfirm {
  constructor(
    private i18n: I18nTranslateService,
    private petsService: PetsService,
    private userService: UserService,
  ) {}

  @SceneEnter()
  async enterAddPetConfirm(@Ctx() ctx: Context) {
    const { petName, petType, petAge, petGender } = ctx['session'];

    const message = [
      'üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü–∞:',
      `–ò–º—è: ${petName}`,
      `–¢–∏–ø: ${petType === 'cat' ? 'üê± –ö–æ—à–∫–∞' : 'üêï –°–æ–±–∞–∫–∞'}`,
      `–í–æ–∑—Ä–∞—Å—Ç: ${petAge} –ª–µ—Ç`,
      `–ü–æ–ª: ${petGender === 'male' ? '‚ôÇÔ∏è –ú–∞–ª—å—á–∏–∫' : '‚ôÄÔ∏è –î–µ–≤–æ—á–∫–∞'}`,
    ].join('\n');

    await ctx.reply(message, PetButtons.petConfirm());
  }

  @Action(['confirm', 'cancel'])
  async onConfirm(@Ctx() ctx: Context) {
    const action = ctx.callbackQuery['data'];

    if (action === 'cancel') {
      await ctx.reply('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      await ctx['scene'].enter(BotScenes.MY_PETS);
      return;
    }

    const { petName, petType, petAge, petGender } = ctx['session'];
    const user = await this.userService.findOne(ctx.from.id);

    try {
      await this.petsService.addPet(user.id, {
        name: petName,
        type: petType,
        age: petAge,
        gender: petGender,
      });

      await ctx.reply('‚úÖ –ü–∏—Ç–æ–º–µ—Ü —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
    } catch (error) {
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞');
    }

    await ctx['scene'].enter(BotScenes.MY_PETS);
  }
}
