import { Action, Ctx, Scene, SceneEnter } from 'nestjs-telegraf';
import { BotScenes } from '../types';
import { RemindersService } from '../../../reminders/reminders.service';
import { UserService } from '../../../user/user.service';
import { PetsService } from '../../../pets/pets.service';
import { ReminderButtons } from './reminder.buttons';
import { BotContext } from 'src/bot/interfaces/context.interface';
import { ReminderFrequency } from '@prisma/client';

@Scene(BotScenes.ADD_REMINDER_CONFIRM)
export class AddReminderConfirm {
  constructor(
    private remindersService: RemindersService,
    private userService: UserService,
    private petsService: PetsService,
  ) {}

  @SceneEnter()
  async enterAddReminderConfirm(@Ctx() ctx: BotContext) {
    const {
      reminderDescription,
      reminderDate,
      reminderFrequency,
      reminderNotifyDays,
      reminderPets,
    } = ctx.session.data;

    let petsInfo = '–û–±—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ';
    if (reminderPets?.length > 0) {
      const pets = await Promise.all(
        reminderPets.map((id) => this.petsService.getPetById(id)),
      );
      petsInfo = `–ü–∏—Ç–æ–º—Ü—ã: ${pets.map((p) => p.name).join(', ')}`;
    }

    const frequencyText = {
      [ReminderFrequency.ONCE]: '–†–∞–∑–æ–≤–æ–µ',
      [ReminderFrequency.WEEKLY]: '–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é',
      [ReminderFrequency.MONTHLY]: '–†–∞–∑ –≤ –º–µ—Å—è—Ü',
      [ReminderFrequency.QUARTERLY]: '–†–∞–∑ –≤ 3 –º–µ—Å—è—Ü–∞',
      [ReminderFrequency.YEARLY]: '–†–∞–∑ –≤ –≥–æ–¥',
    }[reminderFrequency];

    const notifyText = {
      0: '–í —Ç–æ—Ç –∂–µ –¥–µ–Ω—å',
      1: '–ó–∞ –¥–µ–Ω—å –¥–æ',
      7: '–ó–∞ –Ω–µ–¥–µ–ª—é –¥–æ',
    }[reminderNotifyDays];

    const message = [
      'üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:',
      '',
      `üìå –û–ø–∏—Å–∞–Ω–∏–µ: ${reminderDescription}`,
      `üìÖ –î–∞—Ç–∞: ${reminderDate.toLocaleDateString()}`,
      `üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: ${frequencyText}`,
      `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${notifyText}`,
      `üêæ ${petsInfo}`,
    ].join('\n');

    await ctx.reply(message, ReminderButtons.confirmReminder());
  }

  @Action(['confirm_reminder', 'cancel_reminder'])
  async onConfirm(@Ctx() ctx: BotContext) {
    const action = ctx.callbackQuery['data'];

    if (action === 'cancel_reminder') {
      await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ');
      await ctx.scene.enter(BotScenes.REMINDERS_LIST);
      return;
    }

    const {
      reminderDescription,
      reminderDate,
      reminderFrequency,
      reminderNotifyDays,
      reminderPets,
    } = ctx.session.data;

    const user = await this.userService.findOne(ctx.from.id);

    try {
      await this.remindersService.createReminder(user.id, {
        chatId: ctx.from.id.toString(),
        title: reminderDescription,
        date: reminderDate,
        frequency: reminderFrequency,
        notifyDays: reminderNotifyDays as 0 | 1 | 7,
        petIds: reminderPets || [],
      });

      await ctx.reply('‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!');
    } catch (error) {
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è');
      console.log(error);
    }

    await ctx.scene.enter(BotScenes.REMINDERS_LIST);
  }
}
