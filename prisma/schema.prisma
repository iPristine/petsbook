// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  telegramId String   @unique
  firstName  String
  lastName  String?
  username  String?
  lang  String?
  pets      PetUser[]
  logs      UserLog[]
  reminders Reminder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pet {
  id        String   @id @default(cuid())
  name      String
  type      String   // 'cat' или 'dog'
  age       Int?
  gender    String   // 'male' или 'female'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owners    PetUser[]
  reminders PetReminder[]

  @@index([type])
  @@index([gender])
}

model PetUser {
  id        String   @id @default(cuid())
  pet       Pet      @relation(fields: [petId], references: [id])
  petId     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  details   String?
  error     String?
  createdAt DateTime @default(now())
}

model Reminder {
  id          String    @id @default(cuid())
  title       String
  description String?
  eventDate   DateTime
  nextReminderDate DateTime

  date        DateTime
  frequency   ReminderFrequency?
  notifyDays  Int?      // 0 = same day, 1 = day before, 7 = week before
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  pets        PetReminder[]

  @@index([date])
  @@index([userId])
}

enum ReminderFrequency {
  ONCE
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

model PetReminder {
  id          String    @id @default(cuid())
  reminder    Reminder  @relation(fields: [reminderId], references: [id])
  reminderId  String
  pet         Pet       @relation(fields: [petId], references: [id])
  petId       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([reminderId, petId])
}




